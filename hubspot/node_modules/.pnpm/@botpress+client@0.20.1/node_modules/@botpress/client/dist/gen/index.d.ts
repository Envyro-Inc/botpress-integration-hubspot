import { AxiosInstance } from 'axios';
import { toAxiosRequest } from './to-axios';
import * as createConversation from './operations/createConversation';
import * as getConversation from './operations/getConversation';
import * as listConversations from './operations/listConversations';
import * as getOrCreateConversation from './operations/getOrCreateConversation';
import * as updateConversation from './operations/updateConversation';
import * as deleteConversation from './operations/deleteConversation';
import * as listParticipants from './operations/listParticipants';
import * as addParticipant from './operations/addParticipant';
import * as getParticipant from './operations/getParticipant';
import * as removeParticipant from './operations/removeParticipant';
import * as createEvent from './operations/createEvent';
import * as getEvent from './operations/getEvent';
import * as listEvents from './operations/listEvents';
import * as createMessage from './operations/createMessage';
import * as getOrCreateMessage from './operations/getOrCreateMessage';
import * as getMessage from './operations/getMessage';
import * as updateMessage from './operations/updateMessage';
import * as listMessages from './operations/listMessages';
import * as deleteMessage from './operations/deleteMessage';
import * as createUser from './operations/createUser';
import * as getUser from './operations/getUser';
import * as listUsers from './operations/listUsers';
import * as getOrCreateUser from './operations/getOrCreateUser';
import * as updateUser from './operations/updateUser';
import * as deleteUser from './operations/deleteUser';
import * as getState from './operations/getState';
import * as setState from './operations/setState';
import * as getOrSetState from './operations/getOrSetState';
import * as patchState from './operations/patchState';
import * as callAction from './operations/callAction';
import * as configureIntegration from './operations/configureIntegration';
import * as getTask from './operations/getTask';
import * as createTask from './operations/createTask';
import * as updateTask from './operations/updateTask';
import * as deleteTask from './operations/deleteTask';
import * as listTasks from './operations/listTasks';
import * as trackAnalytics from './operations/trackAnalytics';
import * as runVrl from './operations/runVrl';
import * as getAccount from './operations/getAccount';
import * as updateAccount from './operations/updateAccount';
import * as listPersonalAccessTokens from './operations/listPersonalAccessTokens';
import * as createPersonalAccessToken from './operations/createPersonalAccessToken';
import * as deletePersonalAccessToken from './operations/deletePersonalAccessToken';
import * as setAccountPreference from './operations/setAccountPreference';
import * as getAccountPreference from './operations/getAccountPreference';
import * as listPublicIntegrations from './operations/listPublicIntegrations';
import * as getPublicIntegrationById from './operations/getPublicIntegrationById';
import * as getPublicIntegration from './operations/getPublicIntegration';
import * as createBot from './operations/createBot';
import * as updateBot from './operations/updateBot';
import * as transferBot from './operations/transferBot';
import * as listBots from './operations/listBots';
import * as getBot from './operations/getBot';
import * as deleteBot from './operations/deleteBot';
import * as getBotLogs from './operations/getBotLogs';
import * as getBotWebchat from './operations/getBotWebchat';
import * as getBotAnalytics from './operations/getBotAnalytics';
import * as getBotIssue from './operations/getBotIssue';
import * as listBotIssues from './operations/listBotIssues';
import * as deleteBotIssue from './operations/deleteBotIssue';
import * as listBotIssueEvents from './operations/listBotIssueEvents';
import * as setWorkspacePaymentMethod from './operations/setWorkspacePaymentMethod';
import * as listWorkspaceInvoices from './operations/listWorkspaceInvoices';
import * as getUpcomingInvoice from './operations/getUpcomingInvoice';
import * as chargeWorkspaceUnpaidInvoices from './operations/chargeWorkspaceUnpaidInvoices';
import * as createWorkspace from './operations/createWorkspace';
import * as getPublicWorkspace from './operations/getPublicWorkspace';
import * as getWorkspace from './operations/getWorkspace';
import * as listWorkspaceUsages from './operations/listWorkspaceUsages';
import * as breakDownWorkspaceUsageByBot from './operations/breakDownWorkspaceUsageByBot';
import * as getAllWorkspaceQuotaCompletion from './operations/getAllWorkspaceQuotaCompletion';
import * as getWorkspaceQuota from './operations/getWorkspaceQuota';
import * as listWorkspaceQuotas from './operations/listWorkspaceQuotas';
import * as updateWorkspace from './operations/updateWorkspace';
import * as checkHandleAvailability from './operations/checkHandleAvailability';
import * as listWorkspaces from './operations/listWorkspaces';
import * as deleteWorkspace from './operations/deleteWorkspace';
import * as getAuditRecords from './operations/getAuditRecords';
import * as listWorkspaceMembers from './operations/listWorkspaceMembers';
import * as getWorkspaceMember from './operations/getWorkspaceMember';
import * as deleteWorkspaceMember from './operations/deleteWorkspaceMember';
import * as createWorkspaceMember from './operations/createWorkspaceMember';
import * as updateWorkspaceMember from './operations/updateWorkspaceMember';
import * as listIntegrationApiKeys from './operations/listIntegrationApiKeys';
import * as createIntegrationApiKey from './operations/createIntegrationApiKey';
import * as deleteIntegrationApiKey from './operations/deleteIntegrationApiKey';
import * as createIntegration from './operations/createIntegration';
import * as updateIntegration from './operations/updateIntegration';
import * as listIntegrations from './operations/listIntegrations';
import * as getIntegration from './operations/getIntegration';
import * as getIntegrationLogs from './operations/getIntegrationLogs';
import * as getIntegrationByName from './operations/getIntegrationByName';
import * as deleteIntegration from './operations/deleteIntegration';
import * as getUsage from './operations/getUsage';
import * as listUsageHistory from './operations/listUsageHistory';
import * as changeAISpendQuota from './operations/changeAISpendQuota';
import * as listActivities from './operations/listActivities';
import * as introspect from './operations/introspect';
import * as createFile from './operations/createFile';
import * as deleteFile from './operations/deleteFile';
import * as listFiles from './operations/listFiles';
import * as getFile from './operations/getFile';
import * as updateFile from './operations/updateFile';
import * as searchFiles from './operations/searchFiles';
import * as listTables from './operations/listTables';
import * as getTable from './operations/getTable';
import * as getOrCreateTable from './operations/getOrCreateTable';
import * as createTable from './operations/createTable';
import * as duplicateTable from './operations/duplicateTable';
import * as updateTable from './operations/updateTable';
import * as renameTableColumn from './operations/renameTableColumn';
import * as deleteTable from './operations/deleteTable';
import * as getTableRow from './operations/getTableRow';
import * as findTableRows from './operations/findTableRows';
import * as createTableRows from './operations/createTableRows';
import * as deleteTableRows from './operations/deleteTableRows';
import * as updateTableRows from './operations/updateTableRows';
import * as upsertTableRows from './operations/upsertTableRows';
export * from './models';
export * as createConversation from './operations/createConversation';
export * as getConversation from './operations/getConversation';
export * as listConversations from './operations/listConversations';
export * as getOrCreateConversation from './operations/getOrCreateConversation';
export * as updateConversation from './operations/updateConversation';
export * as deleteConversation from './operations/deleteConversation';
export * as listParticipants from './operations/listParticipants';
export * as addParticipant from './operations/addParticipant';
export * as getParticipant from './operations/getParticipant';
export * as removeParticipant from './operations/removeParticipant';
export * as createEvent from './operations/createEvent';
export * as getEvent from './operations/getEvent';
export * as listEvents from './operations/listEvents';
export * as createMessage from './operations/createMessage';
export * as getOrCreateMessage from './operations/getOrCreateMessage';
export * as getMessage from './operations/getMessage';
export * as updateMessage from './operations/updateMessage';
export * as listMessages from './operations/listMessages';
export * as deleteMessage from './operations/deleteMessage';
export * as createUser from './operations/createUser';
export * as getUser from './operations/getUser';
export * as listUsers from './operations/listUsers';
export * as getOrCreateUser from './operations/getOrCreateUser';
export * as updateUser from './operations/updateUser';
export * as deleteUser from './operations/deleteUser';
export * as getState from './operations/getState';
export * as setState from './operations/setState';
export * as getOrSetState from './operations/getOrSetState';
export * as patchState from './operations/patchState';
export * as callAction from './operations/callAction';
export * as configureIntegration from './operations/configureIntegration';
export * as getTask from './operations/getTask';
export * as createTask from './operations/createTask';
export * as updateTask from './operations/updateTask';
export * as deleteTask from './operations/deleteTask';
export * as listTasks from './operations/listTasks';
export * as trackAnalytics from './operations/trackAnalytics';
export * as runVrl from './operations/runVrl';
export * as getAccount from './operations/getAccount';
export * as updateAccount from './operations/updateAccount';
export * as listPersonalAccessTokens from './operations/listPersonalAccessTokens';
export * as createPersonalAccessToken from './operations/createPersonalAccessToken';
export * as deletePersonalAccessToken from './operations/deletePersonalAccessToken';
export * as setAccountPreference from './operations/setAccountPreference';
export * as getAccountPreference from './operations/getAccountPreference';
export * as listPublicIntegrations from './operations/listPublicIntegrations';
export * as getPublicIntegrationById from './operations/getPublicIntegrationById';
export * as getPublicIntegration from './operations/getPublicIntegration';
export * as createBot from './operations/createBot';
export * as updateBot from './operations/updateBot';
export * as transferBot from './operations/transferBot';
export * as listBots from './operations/listBots';
export * as getBot from './operations/getBot';
export * as deleteBot from './operations/deleteBot';
export * as getBotLogs from './operations/getBotLogs';
export * as getBotWebchat from './operations/getBotWebchat';
export * as getBotAnalytics from './operations/getBotAnalytics';
export * as getBotIssue from './operations/getBotIssue';
export * as listBotIssues from './operations/listBotIssues';
export * as deleteBotIssue from './operations/deleteBotIssue';
export * as listBotIssueEvents from './operations/listBotIssueEvents';
export * as setWorkspacePaymentMethod from './operations/setWorkspacePaymentMethod';
export * as listWorkspaceInvoices from './operations/listWorkspaceInvoices';
export * as getUpcomingInvoice from './operations/getUpcomingInvoice';
export * as chargeWorkspaceUnpaidInvoices from './operations/chargeWorkspaceUnpaidInvoices';
export * as createWorkspace from './operations/createWorkspace';
export * as getPublicWorkspace from './operations/getPublicWorkspace';
export * as getWorkspace from './operations/getWorkspace';
export * as listWorkspaceUsages from './operations/listWorkspaceUsages';
export * as breakDownWorkspaceUsageByBot from './operations/breakDownWorkspaceUsageByBot';
export * as getAllWorkspaceQuotaCompletion from './operations/getAllWorkspaceQuotaCompletion';
export * as getWorkspaceQuota from './operations/getWorkspaceQuota';
export * as listWorkspaceQuotas from './operations/listWorkspaceQuotas';
export * as updateWorkspace from './operations/updateWorkspace';
export * as checkHandleAvailability from './operations/checkHandleAvailability';
export * as listWorkspaces from './operations/listWorkspaces';
export * as deleteWorkspace from './operations/deleteWorkspace';
export * as getAuditRecords from './operations/getAuditRecords';
export * as listWorkspaceMembers from './operations/listWorkspaceMembers';
export * as getWorkspaceMember from './operations/getWorkspaceMember';
export * as deleteWorkspaceMember from './operations/deleteWorkspaceMember';
export * as createWorkspaceMember from './operations/createWorkspaceMember';
export * as updateWorkspaceMember from './operations/updateWorkspaceMember';
export * as listIntegrationApiKeys from './operations/listIntegrationApiKeys';
export * as createIntegrationApiKey from './operations/createIntegrationApiKey';
export * as deleteIntegrationApiKey from './operations/deleteIntegrationApiKey';
export * as createIntegration from './operations/createIntegration';
export * as updateIntegration from './operations/updateIntegration';
export * as listIntegrations from './operations/listIntegrations';
export * as getIntegration from './operations/getIntegration';
export * as getIntegrationLogs from './operations/getIntegrationLogs';
export * as getIntegrationByName from './operations/getIntegrationByName';
export * as deleteIntegration from './operations/deleteIntegration';
export * as getUsage from './operations/getUsage';
export * as listUsageHistory from './operations/listUsageHistory';
export * as changeAISpendQuota from './operations/changeAISpendQuota';
export * as listActivities from './operations/listActivities';
export * as introspect from './operations/introspect';
export * as createFile from './operations/createFile';
export * as deleteFile from './operations/deleteFile';
export * as listFiles from './operations/listFiles';
export * as getFile from './operations/getFile';
export * as updateFile from './operations/updateFile';
export * as searchFiles from './operations/searchFiles';
export * as listTables from './operations/listTables';
export * as getTable from './operations/getTable';
export * as getOrCreateTable from './operations/getOrCreateTable';
export * as createTable from './operations/createTable';
export * as duplicateTable from './operations/duplicateTable';
export * as updateTable from './operations/updateTable';
export * as renameTableColumn from './operations/renameTableColumn';
export * as deleteTable from './operations/deleteTable';
export * as getTableRow from './operations/getTableRow';
export * as findTableRows from './operations/findTableRows';
export * as createTableRows from './operations/createTableRows';
export * as deleteTableRows from './operations/deleteTableRows';
export * as updateTableRows from './operations/updateTableRows';
export * as upsertTableRows from './operations/upsertTableRows';
export type ClientProps = {
    toAxiosRequest: typeof toAxiosRequest;
};
export declare class Client {
    private axiosInstance;
    private props;
    constructor(axiosInstance: AxiosInstance, props?: Partial<ClientProps>);
    readonly createConversation: (input: createConversation.CreateConversationInput) => Promise<createConversation.CreateConversationResponse>;
    readonly getConversation: (input: getConversation.GetConversationInput) => Promise<getConversation.GetConversationResponse>;
    readonly listConversations: (input: listConversations.ListConversationsInput) => Promise<listConversations.ListConversationsResponse>;
    readonly getOrCreateConversation: (input: getOrCreateConversation.GetOrCreateConversationInput) => Promise<getOrCreateConversation.GetOrCreateConversationResponse>;
    readonly updateConversation: (input: updateConversation.UpdateConversationInput) => Promise<updateConversation.UpdateConversationResponse>;
    readonly deleteConversation: (input: deleteConversation.DeleteConversationInput) => Promise<deleteConversation.DeleteConversationResponse>;
    readonly listParticipants: (input: listParticipants.ListParticipantsInput) => Promise<listParticipants.ListParticipantsResponse>;
    readonly addParticipant: (input: addParticipant.AddParticipantInput) => Promise<addParticipant.AddParticipantResponse>;
    readonly getParticipant: (input: getParticipant.GetParticipantInput) => Promise<getParticipant.GetParticipantResponse>;
    readonly removeParticipant: (input: removeParticipant.RemoveParticipantInput) => Promise<removeParticipant.RemoveParticipantResponse>;
    readonly createEvent: (input: createEvent.CreateEventInput) => Promise<createEvent.CreateEventResponse>;
    readonly getEvent: (input: getEvent.GetEventInput) => Promise<getEvent.GetEventResponse>;
    readonly listEvents: (input: listEvents.ListEventsInput) => Promise<listEvents.ListEventsResponse>;
    readonly createMessage: (input: createMessage.CreateMessageInput) => Promise<createMessage.CreateMessageResponse>;
    readonly getOrCreateMessage: (input: getOrCreateMessage.GetOrCreateMessageInput) => Promise<getOrCreateMessage.GetOrCreateMessageResponse>;
    readonly getMessage: (input: getMessage.GetMessageInput) => Promise<getMessage.GetMessageResponse>;
    readonly updateMessage: (input: updateMessage.UpdateMessageInput) => Promise<updateMessage.UpdateMessageResponse>;
    readonly listMessages: (input: listMessages.ListMessagesInput) => Promise<listMessages.ListMessagesResponse>;
    readonly deleteMessage: (input: deleteMessage.DeleteMessageInput) => Promise<deleteMessage.DeleteMessageResponse>;
    readonly createUser: (input: createUser.CreateUserInput) => Promise<createUser.CreateUserResponse>;
    readonly getUser: (input: getUser.GetUserInput) => Promise<getUser.GetUserResponse>;
    readonly listUsers: (input: listUsers.ListUsersInput) => Promise<listUsers.ListUsersResponse>;
    readonly getOrCreateUser: (input: getOrCreateUser.GetOrCreateUserInput) => Promise<getOrCreateUser.GetOrCreateUserResponse>;
    readonly updateUser: (input: updateUser.UpdateUserInput) => Promise<updateUser.UpdateUserResponse>;
    readonly deleteUser: (input: deleteUser.DeleteUserInput) => Promise<deleteUser.DeleteUserResponse>;
    readonly getState: (input: getState.GetStateInput) => Promise<getState.GetStateResponse>;
    readonly setState: (input: setState.SetStateInput) => Promise<setState.SetStateResponse>;
    readonly getOrSetState: (input: getOrSetState.GetOrSetStateInput) => Promise<getOrSetState.GetOrSetStateResponse>;
    readonly patchState: (input: patchState.PatchStateInput) => Promise<patchState.PatchStateResponse>;
    readonly callAction: (input: callAction.CallActionInput) => Promise<callAction.CallActionResponse>;
    readonly configureIntegration: (input: configureIntegration.ConfigureIntegrationInput) => Promise<configureIntegration.ConfigureIntegrationResponse>;
    readonly getTask: (input: getTask.GetTaskInput) => Promise<getTask.GetTaskResponse>;
    readonly createTask: (input: createTask.CreateTaskInput) => Promise<createTask.CreateTaskResponse>;
    readonly updateTask: (input: updateTask.UpdateTaskInput) => Promise<updateTask.UpdateTaskResponse>;
    readonly deleteTask: (input: deleteTask.DeleteTaskInput) => Promise<deleteTask.DeleteTaskResponse>;
    readonly listTasks: (input: listTasks.ListTasksInput) => Promise<listTasks.ListTasksResponse>;
    readonly trackAnalytics: (input: trackAnalytics.TrackAnalyticsInput) => Promise<trackAnalytics.TrackAnalyticsResponse>;
    readonly runVrl: (input: runVrl.RunVrlInput) => Promise<runVrl.RunVrlResponse>;
    readonly getAccount: (input: getAccount.GetAccountInput) => Promise<getAccount.GetAccountResponse>;
    readonly updateAccount: (input: updateAccount.UpdateAccountInput) => Promise<updateAccount.UpdateAccountResponse>;
    readonly listPersonalAccessTokens: (input: listPersonalAccessTokens.ListPersonalAccessTokensInput) => Promise<listPersonalAccessTokens.ListPersonalAccessTokensResponse>;
    readonly createPersonalAccessToken: (input: createPersonalAccessToken.CreatePersonalAccessTokenInput) => Promise<createPersonalAccessToken.CreatePersonalAccessTokenResponse>;
    readonly deletePersonalAccessToken: (input: deletePersonalAccessToken.DeletePersonalAccessTokenInput) => Promise<deletePersonalAccessToken.DeletePersonalAccessTokenResponse>;
    readonly setAccountPreference: (input: setAccountPreference.SetAccountPreferenceInput) => Promise<setAccountPreference.SetAccountPreferenceResponse>;
    readonly getAccountPreference: (input: getAccountPreference.GetAccountPreferenceInput) => Promise<getAccountPreference.GetAccountPreferenceResponse>;
    readonly listPublicIntegrations: (input: listPublicIntegrations.ListPublicIntegrationsInput) => Promise<listPublicIntegrations.ListPublicIntegrationsResponse>;
    readonly getPublicIntegrationById: (input: getPublicIntegrationById.GetPublicIntegrationByIdInput) => Promise<getPublicIntegrationById.GetPublicIntegrationByIdResponse>;
    readonly getPublicIntegration: (input: getPublicIntegration.GetPublicIntegrationInput) => Promise<getPublicIntegration.GetPublicIntegrationResponse>;
    readonly createBot: (input: createBot.CreateBotInput) => Promise<createBot.CreateBotResponse>;
    readonly updateBot: (input: updateBot.UpdateBotInput) => Promise<updateBot.UpdateBotResponse>;
    readonly transferBot: (input: transferBot.TransferBotInput) => Promise<transferBot.TransferBotResponse>;
    readonly listBots: (input: listBots.ListBotsInput) => Promise<listBots.ListBotsResponse>;
    readonly getBot: (input: getBot.GetBotInput) => Promise<getBot.GetBotResponse>;
    readonly deleteBot: (input: deleteBot.DeleteBotInput) => Promise<deleteBot.DeleteBotResponse>;
    readonly getBotLogs: (input: getBotLogs.GetBotLogsInput) => Promise<getBotLogs.GetBotLogsResponse>;
    readonly getBotWebchat: (input: getBotWebchat.GetBotWebchatInput) => Promise<getBotWebchat.GetBotWebchatResponse>;
    readonly getBotAnalytics: (input: getBotAnalytics.GetBotAnalyticsInput) => Promise<getBotAnalytics.GetBotAnalyticsResponse>;
    readonly getBotIssue: (input: getBotIssue.GetBotIssueInput) => Promise<getBotIssue.GetBotIssueResponse>;
    readonly listBotIssues: (input: listBotIssues.ListBotIssuesInput) => Promise<listBotIssues.ListBotIssuesResponse>;
    readonly deleteBotIssue: (input: deleteBotIssue.DeleteBotIssueInput) => Promise<deleteBotIssue.DeleteBotIssueResponse>;
    readonly listBotIssueEvents: (input: listBotIssueEvents.ListBotIssueEventsInput) => Promise<listBotIssueEvents.ListBotIssueEventsResponse>;
    readonly setWorkspacePaymentMethod: (input: setWorkspacePaymentMethod.SetWorkspacePaymentMethodInput) => Promise<setWorkspacePaymentMethod.SetWorkspacePaymentMethodResponse>;
    readonly listWorkspaceInvoices: (input: listWorkspaceInvoices.ListWorkspaceInvoicesInput) => Promise<listWorkspaceInvoices.ListWorkspaceInvoicesResponse>;
    readonly getUpcomingInvoice: (input: getUpcomingInvoice.GetUpcomingInvoiceInput) => Promise<getUpcomingInvoice.GetUpcomingInvoiceResponse>;
    readonly chargeWorkspaceUnpaidInvoices: (input: chargeWorkspaceUnpaidInvoices.ChargeWorkspaceUnpaidInvoicesInput) => Promise<chargeWorkspaceUnpaidInvoices.ChargeWorkspaceUnpaidInvoicesResponse>;
    readonly createWorkspace: (input: createWorkspace.CreateWorkspaceInput) => Promise<createWorkspace.CreateWorkspaceResponse>;
    readonly getPublicWorkspace: (input: getPublicWorkspace.GetPublicWorkspaceInput) => Promise<getPublicWorkspace.GetPublicWorkspaceResponse>;
    readonly getWorkspace: (input: getWorkspace.GetWorkspaceInput) => Promise<getWorkspace.GetWorkspaceResponse>;
    readonly listWorkspaceUsages: (input: listWorkspaceUsages.ListWorkspaceUsagesInput) => Promise<listWorkspaceUsages.ListWorkspaceUsagesResponse>;
    readonly breakDownWorkspaceUsageByBot: (input: breakDownWorkspaceUsageByBot.BreakDownWorkspaceUsageByBotInput) => Promise<breakDownWorkspaceUsageByBot.BreakDownWorkspaceUsageByBotResponse>;
    readonly getAllWorkspaceQuotaCompletion: (input: getAllWorkspaceQuotaCompletion.GetAllWorkspaceQuotaCompletionInput) => Promise<getAllWorkspaceQuotaCompletion.GetAllWorkspaceQuotaCompletionResponse>;
    readonly getWorkspaceQuota: (input: getWorkspaceQuota.GetWorkspaceQuotaInput) => Promise<getWorkspaceQuota.GetWorkspaceQuotaResponse>;
    readonly listWorkspaceQuotas: (input: listWorkspaceQuotas.ListWorkspaceQuotasInput) => Promise<listWorkspaceQuotas.ListWorkspaceQuotasResponse>;
    readonly updateWorkspace: (input: updateWorkspace.UpdateWorkspaceInput) => Promise<updateWorkspace.UpdateWorkspaceResponse>;
    readonly checkHandleAvailability: (input: checkHandleAvailability.CheckHandleAvailabilityInput) => Promise<checkHandleAvailability.CheckHandleAvailabilityResponse>;
    readonly listWorkspaces: (input: listWorkspaces.ListWorkspacesInput) => Promise<listWorkspaces.ListWorkspacesResponse>;
    readonly deleteWorkspace: (input: deleteWorkspace.DeleteWorkspaceInput) => Promise<deleteWorkspace.DeleteWorkspaceResponse>;
    readonly getAuditRecords: (input: getAuditRecords.GetAuditRecordsInput) => Promise<getAuditRecords.GetAuditRecordsResponse>;
    readonly listWorkspaceMembers: (input: listWorkspaceMembers.ListWorkspaceMembersInput) => Promise<listWorkspaceMembers.ListWorkspaceMembersResponse>;
    readonly getWorkspaceMember: (input: getWorkspaceMember.GetWorkspaceMemberInput) => Promise<getWorkspaceMember.GetWorkspaceMemberResponse>;
    readonly deleteWorkspaceMember: (input: deleteWorkspaceMember.DeleteWorkspaceMemberInput) => Promise<deleteWorkspaceMember.DeleteWorkspaceMemberResponse>;
    readonly createWorkspaceMember: (input: createWorkspaceMember.CreateWorkspaceMemberInput) => Promise<createWorkspaceMember.CreateWorkspaceMemberResponse>;
    readonly updateWorkspaceMember: (input: updateWorkspaceMember.UpdateWorkspaceMemberInput) => Promise<updateWorkspaceMember.UpdateWorkspaceMemberResponse>;
    readonly listIntegrationApiKeys: (input: listIntegrationApiKeys.ListIntegrationApiKeysInput) => Promise<listIntegrationApiKeys.ListIntegrationApiKeysResponse>;
    readonly createIntegrationApiKey: (input: createIntegrationApiKey.CreateIntegrationApiKeyInput) => Promise<createIntegrationApiKey.CreateIntegrationApiKeyResponse>;
    readonly deleteIntegrationApiKey: (input: deleteIntegrationApiKey.DeleteIntegrationApiKeyInput) => Promise<deleteIntegrationApiKey.DeleteIntegrationApiKeyResponse>;
    readonly createIntegration: (input: createIntegration.CreateIntegrationInput) => Promise<createIntegration.CreateIntegrationResponse>;
    readonly updateIntegration: (input: updateIntegration.UpdateIntegrationInput) => Promise<updateIntegration.UpdateIntegrationResponse>;
    readonly listIntegrations: (input: listIntegrations.ListIntegrationsInput) => Promise<listIntegrations.ListIntegrationsResponse>;
    readonly getIntegration: (input: getIntegration.GetIntegrationInput) => Promise<getIntegration.GetIntegrationResponse>;
    readonly getIntegrationLogs: (input: getIntegrationLogs.GetIntegrationLogsInput) => Promise<getIntegrationLogs.GetIntegrationLogsResponse>;
    readonly getIntegrationByName: (input: getIntegrationByName.GetIntegrationByNameInput) => Promise<getIntegrationByName.GetIntegrationByNameResponse>;
    readonly deleteIntegration: (input: deleteIntegration.DeleteIntegrationInput) => Promise<deleteIntegration.DeleteIntegrationResponse>;
    readonly getUsage: (input: getUsage.GetUsageInput) => Promise<getUsage.GetUsageResponse>;
    readonly listUsageHistory: (input: listUsageHistory.ListUsageHistoryInput) => Promise<listUsageHistory.ListUsageHistoryResponse>;
    readonly changeAISpendQuota: (input: changeAISpendQuota.ChangeAispendQuotaInput) => Promise<changeAISpendQuota.ChangeAispendQuotaResponse>;
    readonly listActivities: (input: listActivities.ListActivitiesInput) => Promise<listActivities.ListActivitiesResponse>;
    readonly introspect: (input: introspect.IntrospectInput) => Promise<introspect.IntrospectResponse>;
    readonly createFile: (input: createFile.CreateFileInput) => Promise<createFile.CreateFileResponse>;
    readonly deleteFile: (input: deleteFile.DeleteFileInput) => Promise<deleteFile.DeleteFileResponse>;
    readonly listFiles: (input: listFiles.ListFilesInput) => Promise<listFiles.ListFilesResponse>;
    readonly getFile: (input: getFile.GetFileInput) => Promise<getFile.GetFileResponse>;
    readonly updateFile: (input: updateFile.UpdateFileInput) => Promise<updateFile.UpdateFileResponse>;
    readonly searchFiles: (input: searchFiles.SearchFilesInput) => Promise<searchFiles.SearchFilesResponse>;
    readonly listTables: (input: listTables.ListTablesInput) => Promise<listTables.ListTablesResponse>;
    readonly getTable: (input: getTable.GetTableInput) => Promise<getTable.GetTableResponse>;
    readonly getOrCreateTable: (input: getOrCreateTable.GetOrCreateTableInput) => Promise<getOrCreateTable.GetOrCreateTableResponse>;
    readonly createTable: (input: createTable.CreateTableInput) => Promise<createTable.CreateTableResponse>;
    readonly duplicateTable: (input: duplicateTable.DuplicateTableInput) => Promise<duplicateTable.DuplicateTableResponse>;
    readonly updateTable: (input: updateTable.UpdateTableInput) => Promise<updateTable.UpdateTableResponse>;
    readonly renameTableColumn: (input: renameTableColumn.RenameTableColumnInput) => Promise<renameTableColumn.RenameTableColumnResponse>;
    readonly deleteTable: (input: deleteTable.DeleteTableInput) => Promise<deleteTable.DeleteTableResponse>;
    readonly getTableRow: (input: getTableRow.GetTableRowInput) => Promise<getTableRow.GetTableRowResponse>;
    readonly findTableRows: (input: findTableRows.FindTableRowsInput) => Promise<findTableRows.FindTableRowsResponse>;
    readonly createTableRows: (input: createTableRows.CreateTableRowsInput) => Promise<createTableRows.CreateTableRowsResponse>;
    readonly deleteTableRows: (input: deleteTableRows.DeleteTableRowsInput) => Promise<deleteTableRows.DeleteTableRowsResponse>;
    readonly updateTableRows: (input: updateTableRows.UpdateTableRowsInput) => Promise<updateTableRows.UpdateTableRowsResponse>;
    readonly upsertTableRows: (input: upsertTableRows.UpsertTableRowsInput) => Promise<upsertTableRows.UpsertTableRowsResponse>;
}
