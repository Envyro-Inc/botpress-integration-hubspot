export interface GetIntegrationLogsRequestHeaders {
}
export interface GetIntegrationLogsRequestQuery {
    timeStart: string;
    timeEnd: string;
    nextToken?: string;
}
export interface GetIntegrationLogsRequestParams {
    id: string;
}
export interface GetIntegrationLogsRequestBody {
}
export type GetIntegrationLogsInput = GetIntegrationLogsRequestBody & GetIntegrationLogsRequestHeaders & GetIntegrationLogsRequestQuery & GetIntegrationLogsRequestParams;
export type GetIntegrationLogsRequest = {
    headers: GetIntegrationLogsRequestHeaders;
    query: GetIntegrationLogsRequestQuery;
    params: GetIntegrationLogsRequestParams;
    body: GetIntegrationLogsRequestBody;
};
export declare const parseReq: (input: GetIntegrationLogsInput) => GetIntegrationLogsRequest & {
    path: string;
};
export interface GetIntegrationLogsResponse {
    logs: {
        timestamp: string;
        level: string;
        message: string;
    }[];
    nextToken?: string;
}
