export interface CreateFileRequestHeaders {
}
export interface CreateFileRequestQuery {
}
export interface CreateFileRequestParams {
}
export interface CreateFileRequestBody {
    /**
     * File name
     */
    name?: string;
    /**
     * File tags as an object of key/value pairs
     */
    tags?: {
        [k: string]: string;
    };
    /**
     * File size in bytes. This will count against your file storage quota. If the `index` parameter is set to `true`, this will also count against your vector database storage quota.
     */
    size: number;
    /**
     * Set to a value of 'true' to index the file in vector storage. Only PDFs, Office documents, and text-based files are currently supported. Note that if a file is indexed, it will count towards the Vector Storage quota of the workspace rather than the File Storage quota.
     */
    index?: boolean;
    /**
     * File access policies. Add "public_content" to allow public access to the file content. Add "integrations" to allow read, search and list operations for any integration installed in the bot.
     */
    accessPolicies?: ("public_content" | "integrations")[];
    /**
     * File content type. If omitted, the content type will be inferred from the file extension. If a type cannot be inferred, the default is "application/octet-stream".
     */
    contentType?: string;
}
export type CreateFileInput = CreateFileRequestBody & CreateFileRequestHeaders & CreateFileRequestQuery & CreateFileRequestParams;
export type CreateFileRequest = {
    headers: CreateFileRequestHeaders;
    query: CreateFileRequestQuery;
    params: CreateFileRequestParams;
    body: CreateFileRequestBody;
};
export declare const parseReq: (input: CreateFileInput) => CreateFileRequest & {
    path: string;
};
export interface CreateFileResponse {
    file: {
        /**
         * File ID
         */
        id: string;
        /**
         * The ID of the bot the file belongs to
         */
        botId: string;
        /**
         * File name
         */
        name: string | null;
        /**
         * File size in bytes. Non-null if file upload status is "COMPLETE".
         */
        size: number | null;
        /**
         * MIME type of the file's content
         */
        contentType: string;
        /**
         * The tags of the file as an object of key/value pairs
         */
        tags: {
            [k: string]: string;
        };
        /**
         * File creation timestamp in ISO 8601 format
         */
        createdAt: string;
        /**
         * File last update timestamp in ISO 8601 format
         */
        updatedAt: string;
        /**
         * Access policies configured for the file.
         */
        accessPolicies: ("integrations" | "public_content")[];
        /**
         * Whether the file was requested to be indexed for search or not.
         */
        index: boolean;
        /**
         * Status of the file. If the status is "upload_pending", the file content has not been uploaded yet. The status will be set to "upload_completed" once the file content has been uploaded successfully.
         *
         * If the upload failed for any reason (e.g. exceeding the storage quota or the maximum file size limit) the status will be set to "upload_failed" and the reason for the failure will be available in the `failedStatusReason` field of the file.
         *
         * However, if the file has been uploaded and the `index` attribute was set to `true` on the file, the status will immediately transition to the "indexing_pending" status (the "upload_completed" status step will be skipped).
         *
         * Once the indexing is completed and the file is ready to be used for searching its status will be set to "indexing_completed". If the indexing failed the status will be set to "indexing_failed" and the reason for the failure will be available in the `failedStatusReason` field.
         */
        status: "upload_pending" | "upload_failed" | "upload_completed" | "indexing_pending" | "indexing_failed" | "indexing_completed";
        /**
         * If the file status is "upload_failed" or "indexing_failed" this will contain the reason of the failure.
         */
        failedStatusReason?: string;
        /**
         * URL to upload the file content. File content needs to be sent to this URL via a PUT request.
         */
        uploadUrl: string;
    };
}
