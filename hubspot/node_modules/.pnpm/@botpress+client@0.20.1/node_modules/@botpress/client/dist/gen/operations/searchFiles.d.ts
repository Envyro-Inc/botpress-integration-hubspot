export interface SearchFilesRequestHeaders {
}
export interface SearchFilesRequestQuery {
    tags?: {
        [k: string]: string;
    };
    query: string;
    contextDepth?: number;
    limit?: number;
}
export interface SearchFilesRequestParams {
}
export interface SearchFilesRequestBody {
}
export type SearchFilesInput = SearchFilesRequestBody & SearchFilesRequestHeaders & SearchFilesRequestQuery & SearchFilesRequestParams;
export type SearchFilesRequest = {
    headers: SearchFilesRequestHeaders;
    query: SearchFilesRequestQuery;
    params: SearchFilesRequestParams;
    body: SearchFilesRequestBody;
};
export declare const parseReq: (input: SearchFilesInput) => SearchFilesRequest & {
    path: string;
};
export interface SearchFilesResponse {
    passages: {
        /**
         * The content of the matching passage in the file including surrounding context, if any.
         */
        content: string;
        /**
         * The score indicating the similarity of the passage to the query. A higher score indicates higher similarity.
         */
        score: number;
        file: {
            /**
             * File ID
             */
            id: string;
            /**
             * File name
             */
            name: string | null;
            /**
             * The tags of the file as an object of key/value pairs.
             */
            tags: {
                [k: string]: string;
            };
            /**
             * File creation timestamp in ISO 8601 format
             */
            createdAt: string;
            /**
             * File last update timestamp in ISO 8601 format
             */
            updatedAt: string;
        };
    }[];
}
