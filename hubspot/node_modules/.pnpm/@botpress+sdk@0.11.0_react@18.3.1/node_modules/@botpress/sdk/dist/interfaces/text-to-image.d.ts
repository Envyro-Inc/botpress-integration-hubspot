import { InterfaceDeclaration } from '../integration/definition';
import z from '../zui';
declare const ImageModelSchema: import("@bpinternal/zui").ZodObject<{
    id: import("@bpinternal/zui").ZodString;
    name: import("@bpinternal/zui").ZodString;
    costPerImage: import("@bpinternal/zui").ZodNumber;
    sizes: import("@bpinternal/zui").ZodArray<import("@bpinternal/zui").ZodString, "many">;
    defaultSize: import("@bpinternal/zui").ZodString;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    id: string;
    name: string;
    costPerImage: number;
    sizes: string[];
    defaultSize: string;
}, {
    id: string;
    name: string;
    costPerImage: number;
    sizes: string[];
    defaultSize: string;
}>;
declare const GenerateContentInputBaseSchema: import("@bpinternal/zui").ZodObject<{
    model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    prompt: import("@bpinternal/zui").ZodString;
    size: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
    expiration: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodNumber>;
    params: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodObject<{}, "strip", import("@bpinternal/zui").ZodTypeAny, {}, {}>>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    prompt: string;
    params?: {} | undefined;
    size?: string | undefined;
    model?: {
        id: string;
    } | undefined;
    expiration?: number | undefined;
}, {
    prompt: string;
    params?: {} | undefined;
    size?: string | undefined;
    model?: {
        id: string;
    } | undefined;
    expiration?: number | undefined;
}>;
declare const GenerateImageOutputSchema: import("@bpinternal/zui").ZodObject<{
    model: import("@bpinternal/zui").ZodString;
    imageUrl: import("@bpinternal/zui").ZodString;
    cost: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodNumber>;
    botpress: import("@bpinternal/zui").ZodObject<{
        cost: import("@bpinternal/zui").ZodNumber;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        cost: number;
    }, {
        cost: number;
    }>;
}, "strip", import("@bpinternal/zui").ZodTypeAny, {
    imageUrl: string;
    model: string;
    botpress: {
        cost: number;
    };
    cost?: number | undefined;
}, {
    imageUrl: string;
    model: string;
    botpress: {
        cost: number;
    };
    cost?: number | undefined;
}>;
export declare const textToImage: InterfaceDeclaration<{
    imageModelRef: import("@bpinternal/zui").ZodObject<{
        id: import("@bpinternal/zui").ZodString;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    imageGenerationParams: import("@bpinternal/zui").ZodObject<{}, "strip", import("@bpinternal/zui").ZodTypeAny, {}, {}>;
}, {
    generateImage: import("@bpinternal/zui").ZodObject<{
        model: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodRef>;
        prompt: import("@bpinternal/zui").ZodString;
        size: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodString>;
        expiration: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodNumber>;
        params: import("@bpinternal/zui").ZodOptional<import("@bpinternal/zui").ZodRef>;
    }, "strip", import("@bpinternal/zui").ZodTypeAny, {
        prompt: string;
        params?: {} | undefined;
        size?: string | undefined;
        model?: {} | undefined;
        expiration?: number | undefined;
    }, {
        prompt: string;
        params?: {} | undefined;
        size?: string | undefined;
        model?: {} | undefined;
        expiration?: number | undefined;
    }>;
    listImageModels: import("@bpinternal/zui").ZodObject<{}, "strip", import("@bpinternal/zui").ZodTypeAny, {}, {}>;
}, import("../integration/definition/generic").BaseEvents>;
export declare namespace textToImage {
    type GenerateImageInputSchema = z.infer<typeof GenerateContentInputBaseSchema>;
    type GenerateImageOutputSchema = z.infer<typeof GenerateImageOutputSchema>;
    type ImageModel = z.infer<typeof ImageModelSchema>;
    type ImageModelDetails = Omit<ImageModel, 'id'>;
}
export {};
