{
  "version": 3,
  "sources": ["../../src/utils/schema-utils.ts"],
  "sourcesContent": ["import { z, transforms } from '@botpress/sdk'\n\ntype ZuiToJsonSchema = typeof transforms.zuiToJsonSchema\ntype JsonSchema = ReturnType<ZuiToJsonSchema>\ntype ObjectJsonSchema = Extract<JsonSchema, { type: 'object' }>\n\ntype SchemaOptions = {\n  title?: string\n  examples?: any[]\n}\n\ntype SchemaDefinition = {\n  schema: z.ZodObject<any>\n  ui?: Record<string, SchemaOptions | undefined>\n}\n\nconst isObjectSchema = (schema: JsonSchema): schema is ObjectJsonSchema => schema.type === 'object'\n\nexport function mapZodToJsonSchema(definition: SchemaDefinition): ReturnType<typeof transforms.zuiToJsonSchema> {\n  const schema = transforms.zuiToJsonSchema(definition.schema, { target: 'jsonSchema7' })\n  if (!isObjectSchema(schema) || !definition.ui) {\n    return schema\n  }\n\n  for (const [key, value] of Object.entries(definition.ui ?? {})) {\n    const property = schema.properties?.[key]\n\n    if (!property) {\n      continue\n    }\n\n    if (!!value?.title) {\n      ;(property as any).title = value.title\n    }\n\n    if (!!value?.examples) {\n      ;(property as any).examples = value.examples\n    }\n  }\n\n  return schema\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA8B;AAgB9B,MAAM,iBAAiB,CAAC,WAAmD,OAAO,SAAS;AAEpF,SAAS,mBAAmB,YAA6E;AAC9G,QAAM,SAAS,sBAAW,gBAAgB,WAAW,QAAQ,EAAE,QAAQ,cAAc,CAAC;AACtF,MAAI,CAAC,eAAe,MAAM,KAAK,CAAC,WAAW,IAAI;AAC7C,WAAO;AAAA,EACT;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,WAAW,MAAM,CAAC,CAAC,GAAG;AAC9D,UAAM,WAAW,OAAO,aAAa;AAErC,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AAEA,QAAI,CAAC,CAAC,OAAO,OAAO;AAClB;AAAC,MAAC,SAAiB,QAAQ,MAAM;AAAA,IACnC;AAEA,QAAI,CAAC,CAAC,OAAO,UAAU;AACrB;AAAC,MAAC,SAAiB,WAAW,MAAM;AAAA,IACtC;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
