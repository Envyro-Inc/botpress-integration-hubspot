{
  "version": 3,
  "sources": ["../../../src/code-generation/integration-schemas/events-module.ts"],
  "sourcesContent": ["import bluebird from 'bluebird'\nimport { jsonSchemaToTypeScriptType } from '../generators'\nimport { Module, ModuleDef, ReExportTypeModule } from '../module'\nimport * as strings from '../strings'\nimport type * as types from '../typings'\n\nexport class EventModule extends Module {\n  public static async create(name: string, event: types.EventDefinition): Promise<EventModule> {\n    const eventName = name\n    const schema = event.schema\n    const exportName = strings.typeName(eventName)\n    const def: ModuleDef = {\n      path: `${name}.ts`,\n      exportName,\n      content: await jsonSchemaToTypeScriptType(schema, exportName),\n    }\n    return new EventModule(def)\n  }\n}\n\nexport class EventsModule extends ReExportTypeModule {\n  public static async create(events: Record<string, types.EventDefinition>): Promise<EventsModule> {\n    const eventModules = await bluebird.map(Object.entries(events), async ([eventName, event]) =>\n      EventModule.create(eventName, event)\n    )\n\n    const inst = new EventsModule({\n      exportName: strings.typeName('events'),\n    })\n    inst.pushDep(...eventModules)\n    return inst\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AACrB,wBAA2C;AAC3C,oBAAsD;AACtD,cAAyB;AAGlB,MAAM,oBAAoB,qBAAO;AAAA,EACtC,aAAoB,OAAO,MAAc,OAAoD;AAC3F,UAAM,YAAY;AAClB,UAAM,SAAS,MAAM;AACrB,UAAM,aAAa,QAAQ,SAAS,SAAS;AAC7C,UAAM,MAAiB;AAAA,MACrB,MAAM,GAAG;AAAA,MACT;AAAA,MACA,SAAS,UAAM,8CAA2B,QAAQ,UAAU;AAAA,IAC9D;AACA,WAAO,IAAI,YAAY,GAAG;AAAA,EAC5B;AACF;AAEO,MAAM,qBAAqB,iCAAmB;AAAA,EACnD,aAAoB,OAAO,QAAsE;AAC/F,UAAM,eAAe,MAAM,gBAAAA,QAAS;AAAA,MAAI,OAAO,QAAQ,MAAM;AAAA,MAAG,OAAO,CAAC,WAAW,KAAK,MACtF,YAAY,OAAO,WAAW,KAAK;AAAA,IACrC;AAEA,UAAM,OAAO,IAAI,aAAa;AAAA,MAC5B,YAAY,QAAQ,SAAS,QAAQ;AAAA,IACvC,CAAC;AACD,SAAK,QAAQ,GAAG,YAAY;AAC5B,WAAO;AAAA,EACT;AACF;",
  "names": ["bluebird"]
}
