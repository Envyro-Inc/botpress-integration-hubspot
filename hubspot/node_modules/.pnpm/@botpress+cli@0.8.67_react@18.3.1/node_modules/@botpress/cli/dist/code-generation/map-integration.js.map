{
  "version": 3,
  "sources": ["../../src/code-generation/map-integration.ts"],
  "sourcesContent": ["import type * as client from '@botpress/client'\nimport type * as sdk from '@botpress/sdk'\nimport { z } from '@botpress/sdk'\nimport * as utils from '../utils'\nimport * as types from './typings'\n\nexport namespace from {\n  export const sdk = (i: sdk.IntegrationDefinition): types.IntegrationDefinition => {\n    return {\n      id: null,\n      name: i.name,\n      version: i.version,\n      user: {\n        tags: i.user?.tags ?? {},\n        creation: i.user?.creation ?? { enabled: false, requiredTags: [] },\n      },\n      configuration: i.configuration ? _mapSchema(i.configuration) : { schema: {} },\n      events: i.events ? utils.records.mapValues(i.events, _mapSchema) : {},\n      states: i.states ? utils.records.mapValues(i.states, _mapSchema) : {},\n      actions: i.actions\n        ? utils.records.mapValues(i.actions, (a) => ({\n            input: _mapSchema(a.input),\n            output: _mapSchema(a.output),\n          }))\n        : {},\n      channels: i.channels\n        ? utils.records.mapValues(i.channels, (c) => ({\n            conversation: {\n              tags: c.conversation?.tags ?? {},\n              creation: c.conversation?.creation ?? { enabled: false, requiredTags: [] },\n            },\n            message: {\n              tags: c.message?.tags ?? {},\n            },\n            messages: utils.records.mapValues(c.messages, _mapSchema),\n          }))\n        : {},\n      entities: i.entities ? utils.records.mapValues(i.entities, _mapSchema) : {},\n    }\n  }\n\n  export const client = (i: client.Integration): types.IntegrationDefinition => {\n    const { id, name, version, configuration, channels, states, events, actions, user, entities } = i\n    return { id, name, version, configuration, channels, states, events, actions, user, entities }\n  }\n\n  const _mapSchema = <T extends { schema: z.ZodObject<any> }>(\n    x: T\n  ): utils.types.Merge<T, { schema: ReturnType<typeof utils.schema.mapZodToJsonSchema> }> => ({\n    ...x,\n    schema: utils.schema.mapZodToJsonSchema(x),\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,YAAuB;AAGhB,IAAU;AAAA,CAAV,CAAUA,UAAV;AACE,EAAMA,MAAA,MAAM,CAAC,MAA8D;AAChF,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM,EAAE;AAAA,MACR,SAAS,EAAE;AAAA,MACX,MAAM;AAAA,QACJ,MAAM,EAAE,MAAM,QAAQ,CAAC;AAAA,QACvB,UAAU,EAAE,MAAM,YAAY,EAAE,SAAS,OAAO,cAAc,CAAC,EAAE;AAAA,MACnE;AAAA,MACA,eAAe,EAAE,gBAAgB,WAAW,EAAE,aAAa,IAAI,EAAE,QAAQ,CAAC,EAAE;AAAA,MAC5E,QAAQ,EAAE,SAAS,MAAM,QAAQ,UAAU,EAAE,QAAQ,UAAU,IAAI,CAAC;AAAA,MACpE,QAAQ,EAAE,SAAS,MAAM,QAAQ,UAAU,EAAE,QAAQ,UAAU,IAAI,CAAC;AAAA,MACpE,SAAS,EAAE,UACP,MAAM,QAAQ,UAAU,EAAE,SAAS,CAAC,OAAO;AAAA,QACzC,OAAO,WAAW,EAAE,KAAK;AAAA,QACzB,QAAQ,WAAW,EAAE,MAAM;AAAA,MAC7B,EAAE,IACF,CAAC;AAAA,MACL,UAAU,EAAE,WACR,MAAM,QAAQ,UAAU,EAAE,UAAU,CAAC,OAAO;AAAA,QAC1C,cAAc;AAAA,UACZ,MAAM,EAAE,cAAc,QAAQ,CAAC;AAAA,UAC/B,UAAU,EAAE,cAAc,YAAY,EAAE,SAAS,OAAO,cAAc,CAAC,EAAE;AAAA,QAC3E;AAAA,QACA,SAAS;AAAA,UACP,MAAM,EAAE,SAAS,QAAQ,CAAC;AAAA,QAC5B;AAAA,QACA,UAAU,MAAM,QAAQ,UAAU,EAAE,UAAU,UAAU;AAAA,MAC1D,EAAE,IACF,CAAC;AAAA,MACL,UAAU,EAAE,WAAW,MAAM,QAAQ,UAAU,EAAE,UAAU,UAAU,IAAI,CAAC;AAAA,IAC5E;AAAA,EACF;AAEO,EAAMA,MAAA,SAAS,CAAC,MAAuD;AAC5E,UAAM,EAAE,IAAI,MAAM,SAAS,eAAe,UAAU,QAAQ,QAAQ,SAAS,MAAM,SAAS,IAAI;AAChG,WAAO,EAAE,IAAI,MAAM,SAAS,eAAe,UAAU,QAAQ,QAAQ,SAAS,MAAM,SAAS;AAAA,EAC/F;AAEA,QAAM,aAAa,CACjB,OAC0F;AAAA,IAC1F,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,CAAC;AAAA,EAC3C;AAAA,GA7Ce;",
  "names": ["from"]
}
