"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var client_exports = {};
__export(client_exports, {
  ApiClient: () => ApiClient
});
module.exports = __toCommonJS(client_exports);
var client = __toESM(require("@botpress/client"));
var import_lodash = __toESM(require("lodash"));
var import_integration_ref = require("../integration-ref");
var import_find_previous_version = require("./find-previous-version");
var paging = __toESM(require("./paging"));
__reExport(client_exports, require("./types"), module.exports);
class ApiClient {
  constructor(props, _logger) {
    this._logger = _logger;
    const { apiUrl, token, workspaceId } = props;
    this.client = new client.Client({ apiUrl, token, workspaceId });
    this.url = apiUrl;
    this.token = token;
    this.workspaceId = workspaceId;
  }
  client;
  url;
  token;
  workspaceId;
  static newClient = (props, logger) => new ApiClient(props, logger);
  get isBotpressWorkspace() {
    return [
      "6a76fa10-e150-4ff6-8f59-a300feec06c1",
      "95de33eb-1551-4af9-9088-e5dcb02efd09",
      "11111111-1111-1111-aaaa-111111111111"
    ].includes(this.workspaceId);
  }
  async getWorkspace() {
    return this.client.getWorkspace({ id: this.workspaceId });
  }
  async updateWorkspace(props) {
    return this.client.updateWorkspace({ id: this.workspaceId, ...props });
  }
  async findIntegration(ref) {
    const formatted = (0, import_integration_ref.formatIntegrationRef)(ref);
    const privateIntegration = await this.findPrivateIntegration(ref);
    if (privateIntegration) {
      this._logger.debug(`Found integration "${formatted}" in workspace`);
      return privateIntegration;
    }
    const publicIntegration = await this.findPublicIntegration(ref);
    if (publicIntegration) {
      this._logger.debug(`Found integration "${formatted}" in hub`);
      return publicIntegration;
    }
    return;
  }
  async findPrivateIntegration(ref) {
    const { workspaceId } = this;
    if (ref.type === "id") {
      return this.validateStatus(
        () => this.client.getIntegration(ref).then((r) => ({ ...r.integration, workspaceId })),
        404
      );
    }
    return this.validateStatus(
      () => this.client.getIntegrationByName(ref).then((r) => ({ ...r.integration, workspaceId })),
      404
    );
  }
  async findPublicIntegration(ref) {
    if (ref.type === "id") {
      return this.validateStatus(() => this.client.getPublicIntegrationById(ref).then((r) => r.integration), 404);
    }
    return this.validateStatus(() => this.client.getPublicIntegration(ref).then((r) => r.integration), 404);
  }
  async findPublicInterface(ref) {
    if (ref.type === "id") {
      return this.validateStatus(() => this.client.getInterface(ref).then((r) => r.interface), 404);
    }
    return this.validateStatus(() => this.client.getInterfaceByName(ref).then((r) => r.interface), 404);
  }
  async testLogin() {
    await this.client.listBots({});
  }
  listAllPages = paging.listAllPages;
  async validateStatus(fn, allowedStatuses) {
    try {
      const v = await fn();
      return v;
    } catch (err) {
      const allowedStatusesArray = import_lodash.default.isArray(allowedStatuses) ? allowedStatuses : [allowedStatuses];
      const isAllowed = client.isApiError(err) && err.code && allowedStatusesArray.includes(err.code);
      if (isAllowed) {
        return;
      }
      throw err;
    }
  }
  async findPreviousIntegrationVersion(ref) {
    const previous = await (0, import_find_previous_version.findPreviousIntegrationVersion)(this.client, ref);
    if (!previous) {
      return;
    }
    return this.findIntegration({ type: "id", id: previous.id });
  }
  async findBotByName(name) {
    const allBots = await this.listAllPages(this.client.listBots, (r) => r.bots);
    return allBots.find((b) => b.name === name);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiClient
});
//# sourceMappingURL=client.js.map
