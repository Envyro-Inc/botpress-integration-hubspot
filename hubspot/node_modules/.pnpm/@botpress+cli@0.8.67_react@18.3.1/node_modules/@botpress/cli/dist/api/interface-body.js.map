{
  "version": 3,
  "sources": ["../../src/api/interface-body.ts"],
  "sourcesContent": ["import type { Client, Interface } from '@botpress/client'\nimport type * as sdk from '@botpress/sdk'\nimport { AnyZodObject, GenericZuiSchema, z } from '@botpress/sdk'\nimport * as utils from '../utils'\n\nexport type CreateInterfaceBody = Parameters<Client['createInterface']>[0]\nexport type UpdateInterfaceBody = Parameters<Client['updateInterface']>[0]\n\nexport const prepareCreateInterfaceBody = (intrface: sdk.InterfaceDeclaration): CreateInterfaceBody => ({\n  name: intrface.name,\n  version: intrface.version,\n  entities: intrface.entities\n    ? utils.records.mapValues(intrface.entities, (entity) => ({\n        ...entity,\n        schema: utils.schema.mapZodToJsonSchema(entity),\n      }))\n    : {},\n  events: intrface.events\n    ? utils.records.mapValues(intrface.events, (event) => ({\n        ...event,\n        schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, event)),\n      }))\n    : {},\n  actions: intrface.actions\n    ? utils.records.mapValues(intrface.actions, (action) => ({\n        ...action,\n        input: {\n          ...action.input,\n          schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, action.input)),\n        },\n        output: {\n          ...action.output,\n          schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, action.output)),\n        },\n      }))\n    : {},\n})\n\nexport const prepareUpdateInterfaceBody = (\n  localInterface: UpdateInterfaceBody,\n  remoteInterface: Interface\n): UpdateInterfaceBody => {\n  const actions = utils.records.setNullOnMissingValues(localInterface.actions, remoteInterface.actions)\n  const events = utils.records.setNullOnMissingValues(localInterface.events, remoteInterface.events)\n  const entities = utils.records.setNullOnMissingValues(localInterface.entities, remoteInterface.entities)\n  return {\n    ...localInterface,\n    entities,\n    actions,\n    events,\n  }\n}\n\nconst _dereference = (\n  intrface: sdk.InterfaceDeclaration,\n  { schema }: { schema: GenericZuiSchema<Record<string, z.ZodRef>, AnyZodObject> }\n): { schema: AnyZodObject } => {\n  const typeArguments = utils.records.mapValues(intrface.entities, (_, entityName) => z.ref(entityName))\n  return { schema: schema(typeArguments) }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAkD;AAClD,YAAuB;AAKhB,MAAM,6BAA6B,CAAC,cAA6D;AAAA,EACtG,MAAM,SAAS;AAAA,EACf,SAAS,SAAS;AAAA,EAClB,UAAU,SAAS,WACf,MAAM,QAAQ,UAAU,SAAS,UAAU,CAAC,YAAY;AAAA,IACtD,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,MAAM;AAAA,EAChD,EAAE,IACF,CAAC;AAAA,EACL,QAAQ,SAAS,SACb,MAAM,QAAQ,UAAU,SAAS,QAAQ,CAAC,WAAW;AAAA,IACnD,GAAG;AAAA,IACH,QAAQ,MAAM,OAAO,mBAAmB,aAAa,UAAU,KAAK,CAAC;AAAA,EACvE,EAAE,IACF,CAAC;AAAA,EACL,SAAS,SAAS,UACd,MAAM,QAAQ,UAAU,SAAS,SAAS,CAAC,YAAY;AAAA,IACrD,GAAG;AAAA,IACH,OAAO;AAAA,MACL,GAAG,OAAO;AAAA,MACV,QAAQ,MAAM,OAAO,mBAAmB,aAAa,UAAU,OAAO,KAAK,CAAC;AAAA,IAC9E;AAAA,IACA,QAAQ;AAAA,MACN,GAAG,OAAO;AAAA,MACV,QAAQ,MAAM,OAAO,mBAAmB,aAAa,UAAU,OAAO,MAAM,CAAC;AAAA,IAC/E;AAAA,EACF,EAAE,IACF,CAAC;AACP;AAEO,MAAM,6BAA6B,CACxC,gBACA,oBACwB;AACxB,QAAM,UAAU,MAAM,QAAQ,uBAAuB,eAAe,SAAS,gBAAgB,OAAO;AACpG,QAAM,SAAS,MAAM,QAAQ,uBAAuB,eAAe,QAAQ,gBAAgB,MAAM;AACjG,QAAM,WAAW,MAAM,QAAQ,uBAAuB,eAAe,UAAU,gBAAgB,QAAQ;AACvG,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,MAAM,eAAe,CACnB,UACA,EAAE,OAAO,MACoB;AAC7B,QAAM,gBAAgB,MAAM,QAAQ,UAAU,SAAS,UAAU,CAAC,GAAG,eAAe,aAAE,IAAI,UAAU,CAAC;AACrG,SAAO,EAAE,QAAQ,OAAO,aAAa,EAAE;AACzC;",
  "names": []
}
