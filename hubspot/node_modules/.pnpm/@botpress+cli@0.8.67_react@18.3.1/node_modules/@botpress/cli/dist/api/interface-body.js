"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var interface_body_exports = {};
__export(interface_body_exports, {
  prepareCreateInterfaceBody: () => prepareCreateInterfaceBody,
  prepareUpdateInterfaceBody: () => prepareUpdateInterfaceBody
});
module.exports = __toCommonJS(interface_body_exports);
var import_sdk = require("@botpress/sdk");
var utils = __toESM(require("../utils"));
const prepareCreateInterfaceBody = (intrface) => ({
  name: intrface.name,
  version: intrface.version,
  entities: intrface.entities ? utils.records.mapValues(intrface.entities, (entity) => ({
    ...entity,
    schema: utils.schema.mapZodToJsonSchema(entity)
  })) : {},
  events: intrface.events ? utils.records.mapValues(intrface.events, (event) => ({
    ...event,
    schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, event))
  })) : {},
  actions: intrface.actions ? utils.records.mapValues(intrface.actions, (action) => ({
    ...action,
    input: {
      ...action.input,
      schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, action.input))
    },
    output: {
      ...action.output,
      schema: utils.schema.mapZodToJsonSchema(_dereference(intrface, action.output))
    }
  })) : {}
});
const prepareUpdateInterfaceBody = (localInterface, remoteInterface) => {
  const actions = utils.records.setNullOnMissingValues(localInterface.actions, remoteInterface.actions);
  const events = utils.records.setNullOnMissingValues(localInterface.events, remoteInterface.events);
  const entities = utils.records.setNullOnMissingValues(localInterface.entities, remoteInterface.entities);
  return {
    ...localInterface,
    entities,
    actions,
    events
  };
};
const _dereference = (intrface, { schema }) => {
  const typeArguments = utils.records.mapValues(intrface.entities, (_, entityName) => import_sdk.z.ref(entityName));
  return { schema: schema(typeArguments) };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  prepareCreateInterfaceBody,
  prepareUpdateInterfaceBody
});
//# sourceMappingURL=interface-body.js.map
