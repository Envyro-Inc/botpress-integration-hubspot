{
  "version": 3,
  "sources": ["../../../src/code-generation/integration-schemas/channels-module.ts"],
  "sourcesContent": ["import bluebird from 'bluebird'\nimport { GENERATED_HEADER, INDEX_FILE } from '../const'\nimport { jsonSchemaToTypeScriptType, stringifySingleLine } from '../generators'\nimport { Module, ModuleDef, ReExportTypeModule } from '../module'\nimport * as strings from '../strings'\nimport type * as types from '../typings'\n\nexport class MessageModule extends Module {\n  public static async create(name: string, message: types.MessageDefinition): Promise<MessageModule> {\n    const schema = message.schema\n    const exportName = strings.typeName(name)\n    const def: ModuleDef = {\n      path: `${name}.ts`,\n      exportName,\n      content: await jsonSchemaToTypeScriptType(schema, exportName),\n    }\n    return new MessageModule(def)\n  }\n}\n\nexport class MessagesModule extends ReExportTypeModule {\n  public static async create(channel: types.ChannelDefinition): Promise<MessagesModule> {\n    const messages = channel.messages ?? {}\n    const messageModules = await bluebird.map(Object.entries(messages), ([messageName, message]) =>\n      MessageModule.create(messageName, message)\n    )\n\n    const inst = new MessagesModule({\n      exportName: strings.typeName('messages'),\n    })\n    inst.pushDep(...messageModules)\n    return inst\n  }\n}\n\nexport class ChannelModule extends Module {\n  public static async create(channelName: string, channel: types.ChannelDefinition): Promise<ChannelModule> {\n    const messagesModule = await MessagesModule.create(channel)\n    messagesModule.unshift('messages')\n\n    const exportName = strings.typeName(channelName)\n    const inst = new ChannelModule(messagesModule, channel, {\n      path: INDEX_FILE,\n      exportName,\n      content: '',\n    })\n\n    inst.pushDep(messagesModule)\n    return inst\n  }\n\n  private constructor(private messageModules: MessageModule, private channel: types.ChannelDefinition, def: ModuleDef) {\n    super(def)\n  }\n\n  public override get content() {\n    const { messageModules } = this\n    const messageImport = messageModules.import(this)\n\n    return [\n      GENERATED_HEADER,\n      `import { ${messageModules.exports} } from './${messageImport}'`,\n      `export * from './${messageImport}'`,\n      '',\n      `export type ${this.exports} = {`,\n      `  messages: ${messageModules.exports}`,\n      `  message: ${stringifySingleLine(this.channel.message)}`,\n      `  conversation: ${stringifySingleLine(this.channel.conversation)}`,\n      '}',\n    ].join('\\n')\n  }\n}\n\nexport class ChannelsModule extends ReExportTypeModule {\n  public static async create(channels: Record<string, types.ChannelDefinition>): Promise<ChannelsModule> {\n    const channelModules = await bluebird.map(Object.entries(channels), async ([channelName, channel]) => {\n      const mod = await ChannelModule.create(channelName, channel)\n      return mod.unshift(channelName)\n    })\n\n    const exportName = strings.typeName('channels')\n    const inst = new ChannelsModule({ exportName })\n    inst.pushDep(...channelModules)\n    return inst\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AACrB,mBAA6C;AAC7C,wBAAgE;AAChE,oBAAsD;AACtD,cAAyB;AAGlB,MAAM,sBAAsB,qBAAO;AAAA,EACxC,aAAoB,OAAO,MAAc,SAA0D;AACjG,UAAM,SAAS,QAAQ;AACvB,UAAM,aAAa,QAAQ,SAAS,IAAI;AACxC,UAAM,MAAiB;AAAA,MACrB,MAAM,GAAG;AAAA,MACT;AAAA,MACA,SAAS,UAAM,8CAA2B,QAAQ,UAAU;AAAA,IAC9D;AACA,WAAO,IAAI,cAAc,GAAG;AAAA,EAC9B;AACF;AAEO,MAAM,uBAAuB,iCAAmB;AAAA,EACrD,aAAoB,OAAO,SAA2D;AACpF,UAAM,WAAW,QAAQ,YAAY,CAAC;AACtC,UAAM,iBAAiB,MAAM,gBAAAA,QAAS;AAAA,MAAI,OAAO,QAAQ,QAAQ;AAAA,MAAG,CAAC,CAAC,aAAa,OAAO,MACxF,cAAc,OAAO,aAAa,OAAO;AAAA,IAC3C;AAEA,UAAM,OAAO,IAAI,eAAe;AAAA,MAC9B,YAAY,QAAQ,SAAS,UAAU;AAAA,IACzC,CAAC;AACD,SAAK,QAAQ,GAAG,cAAc;AAC9B,WAAO;AAAA,EACT;AACF;AAEO,MAAM,sBAAsB,qBAAO;AAAA,EAgBhC,YAAoB,gBAAuC,SAAkC,KAAgB;AACnH,UAAM,GAAG;AADiB;AAAuC;AAAA,EAEnE;AAAA,EAjBA,aAAoB,OAAO,aAAqB,SAA0D;AACxG,UAAM,iBAAiB,MAAM,eAAe,OAAO,OAAO;AAC1D,mBAAe,QAAQ,UAAU;AAEjC,UAAM,aAAa,QAAQ,SAAS,WAAW;AAC/C,UAAM,OAAO,IAAI,cAAc,gBAAgB,SAAS;AAAA,MACtD,MAAM;AAAA,MACN;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAED,SAAK,QAAQ,cAAc;AAC3B,WAAO;AAAA,EACT;AAAA,EAMA,IAAoB,UAAU;AAC5B,UAAM,EAAE,eAAe,IAAI;AAC3B,UAAM,gBAAgB,eAAe,OAAO,IAAI;AAEhD,WAAO;AAAA,MACL;AAAA,MACA,YAAY,eAAe,qBAAqB;AAAA,MAChD,oBAAoB;AAAA,MACpB;AAAA,MACA,eAAe,KAAK;AAAA,MACpB,eAAe,eAAe;AAAA,MAC9B,kBAAc,uCAAoB,KAAK,QAAQ,OAAO;AAAA,MACtD,uBAAmB,uCAAoB,KAAK,QAAQ,YAAY;AAAA,MAChE;AAAA,IACF,EAAE,KAAK,IAAI;AAAA,EACb;AACF;AAEO,MAAM,uBAAuB,iCAAmB;AAAA,EACrD,aAAoB,OAAO,UAA4E;AACrG,UAAM,iBAAiB,MAAM,gBAAAA,QAAS,IAAI,OAAO,QAAQ,QAAQ,GAAG,OAAO,CAAC,aAAa,OAAO,MAAM;AACpG,YAAM,MAAM,MAAM,cAAc,OAAO,aAAa,OAAO;AAC3D,aAAO,IAAI,QAAQ,WAAW;AAAA,IAChC,CAAC;AAED,UAAM,aAAa,QAAQ,SAAS,UAAU;AAC9C,UAAM,OAAO,IAAI,eAAe,EAAE,WAAW,CAAC;AAC9C,SAAK,QAAQ,GAAG,cAAc;AAC9B,WAAO;AAAA,EACT;AACF;",
  "names": ["bluebird"]
}
