{
  "version": 3,
  "sources": ["../../../src/code-generation/integration-schemas/actions-module.ts"],
  "sourcesContent": ["import bluebird from 'bluebird'\nimport { jsonSchemaToTypeScriptType } from '../generators'\nimport { Module, ModuleDef, ReExportTypeModule } from '../module'\nimport * as strings from '../strings'\nimport type * as types from '../typings'\n\ntype ActionInput = types.ActionDefinition['input']\ntype ActionOutput = types.ActionDefinition['output']\n\nexport class ActionInputModule extends Module {\n  public static async create(input: ActionInput): Promise<ActionInputModule> {\n    const schema = input.schema\n    const name = 'input'\n    const exportName = strings.typeName(name)\n    const def: ModuleDef = {\n      path: `${name}.ts`,\n      exportName,\n      content: await jsonSchemaToTypeScriptType(schema, exportName),\n    }\n    return new ActionInputModule(def)\n  }\n}\n\nexport class ActionOutputModule extends Module {\n  public static async create(output: ActionOutput): Promise<ActionOutputModule> {\n    const schema = output.schema\n    const name = 'output'\n    const exportName = strings.typeName(name)\n    const def: ModuleDef = {\n      path: `${name}.ts`,\n      exportName,\n      content: await jsonSchemaToTypeScriptType(schema, exportName),\n    }\n    return new ActionOutputModule(def)\n  }\n}\n\nexport class ActionModule extends ReExportTypeModule {\n  public static async create(actionName: string, action: types.ActionDefinition): Promise<ActionModule> {\n    const inputModule = await ActionInputModule.create(action.input)\n    const outputModule = await ActionOutputModule.create(action.output)\n\n    const exportName = strings.typeName(actionName)\n    const inst = new ActionModule({\n      exportName,\n    })\n\n    inst.pushDep(inputModule)\n    inst.pushDep(outputModule)\n\n    return inst\n  }\n}\n\nexport class ActionsModule extends ReExportTypeModule {\n  public static async create(actions: Record<string, types.ActionDefinition>): Promise<ActionsModule> {\n    const actionModules = await bluebird.map(Object.entries(actions), async ([actionName, action]) => {\n      const mod = await ActionModule.create(actionName, action)\n      return mod.unshift(actionName)\n    })\n\n    const inst = new ActionsModule({\n      exportName: strings.typeName('actions'),\n    })\n\n    inst.pushDep(...actionModules)\n    return inst\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqB;AACrB,wBAA2C;AAC3C,oBAAsD;AACtD,cAAyB;AAMlB,MAAM,0BAA0B,qBAAO;AAAA,EAC5C,aAAoB,OAAO,OAAgD;AACzE,UAAM,SAAS,MAAM;AACrB,UAAM,OAAO;AACb,UAAM,aAAa,QAAQ,SAAS,IAAI;AACxC,UAAM,MAAiB;AAAA,MACrB,MAAM,GAAG;AAAA,MACT;AAAA,MACA,SAAS,UAAM,8CAA2B,QAAQ,UAAU;AAAA,IAC9D;AACA,WAAO,IAAI,kBAAkB,GAAG;AAAA,EAClC;AACF;AAEO,MAAM,2BAA2B,qBAAO;AAAA,EAC7C,aAAoB,OAAO,QAAmD;AAC5E,UAAM,SAAS,OAAO;AACtB,UAAM,OAAO;AACb,UAAM,aAAa,QAAQ,SAAS,IAAI;AACxC,UAAM,MAAiB;AAAA,MACrB,MAAM,GAAG;AAAA,MACT;AAAA,MACA,SAAS,UAAM,8CAA2B,QAAQ,UAAU;AAAA,IAC9D;AACA,WAAO,IAAI,mBAAmB,GAAG;AAAA,EACnC;AACF;AAEO,MAAM,qBAAqB,iCAAmB;AAAA,EACnD,aAAoB,OAAO,YAAoB,QAAuD;AACpG,UAAM,cAAc,MAAM,kBAAkB,OAAO,OAAO,KAAK;AAC/D,UAAM,eAAe,MAAM,mBAAmB,OAAO,OAAO,MAAM;AAElE,UAAM,aAAa,QAAQ,SAAS,UAAU;AAC9C,UAAM,OAAO,IAAI,aAAa;AAAA,MAC5B;AAAA,IACF,CAAC;AAED,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,YAAY;AAEzB,WAAO;AAAA,EACT;AACF;AAEO,MAAM,sBAAsB,iCAAmB;AAAA,EACpD,aAAoB,OAAO,SAAyE;AAClG,UAAM,gBAAgB,MAAM,gBAAAA,QAAS,IAAI,OAAO,QAAQ,OAAO,GAAG,OAAO,CAAC,YAAY,MAAM,MAAM;AAChG,YAAM,MAAM,MAAM,aAAa,OAAO,YAAY,MAAM;AACxD,aAAO,IAAI,QAAQ,UAAU;AAAA,IAC/B,CAAC;AAED,UAAM,OAAO,IAAI,cAAc;AAAA,MAC7B,YAAY,QAAQ,SAAS,SAAS;AAAA,IACxC,CAAC;AAED,SAAK,QAAQ,GAAG,aAAa;AAC7B,WAAO;AAAA,EACT;AACF;",
  "names": ["bluebird"]
}
