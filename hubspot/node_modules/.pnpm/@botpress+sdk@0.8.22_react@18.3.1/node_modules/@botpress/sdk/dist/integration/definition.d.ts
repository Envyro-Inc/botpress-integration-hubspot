import { SchemaDefinition } from '../schema';
import { AnyZodObject } from '../type-utils';
type BaseConfig = AnyZodObject;
type BaseEvents = Record<string, AnyZodObject>;
type BaseActions = Record<string, AnyZodObject>;
type BaseMessages = Record<string, AnyZodObject>;
type BaseChannels = Record<string, BaseMessages>;
type BaseStates = Record<string, AnyZodObject>;
type BaseEntities = Record<string, AnyZodObject>;
export type TagDefinition = {
    title?: string;
    description?: string;
};
export type ConfigurationDefinition<TConfig extends BaseConfig = BaseConfig> = SchemaDefinition<TConfig> & {
    identifier?: {
        required?: boolean;
        linkTemplateScript?: string;
    };
};
export type EventDefinition<TEvent extends BaseEvents[string] = BaseEvents[string]> = SchemaDefinition<TEvent> & {
    title?: string;
    description?: string;
};
export type MessageDefinition<TMessage extends BaseMessages[string] = BaseMessages[string]> = SchemaDefinition<TMessage>;
export type ChannelDefinition<TChannel extends BaseChannels[string] = BaseChannels[string]> = {
    title?: string;
    description?: string;
    messages: {
        [K in keyof TChannel]: MessageDefinition<TChannel[K]>;
    };
    message?: {
        tags?: Record<string, TagDefinition>;
    };
    conversation?: Partial<{
        tags: Record<string, TagDefinition>;
        /**
         * @deprecated
         */
        creation: {
            enabled: boolean;
            requiredTags: string[];
        };
    }>;
};
export type ActionDefinition<TAction extends BaseActions[string] = BaseActions[string]> = {
    title?: string;
    description?: string;
    input: SchemaDefinition<TAction>;
    output: SchemaDefinition<AnyZodObject>;
};
export type StateDefinition<TState extends BaseStates[string] = BaseStates[string]> = SchemaDefinition<TState> & {
    type: 'integration' | 'conversation' | 'user';
};
export type UserDefinition = Partial<{
    tags: Record<string, TagDefinition>;
    /**
     * @deprecated
     */
    creation: {
        enabled: boolean;
        requiredTags: string[];
    };
}>;
export type SecretDefinition = {
    optional?: boolean;
    description?: string;
};
export type EntityDefinition<TEntity extends BaseEntities[string] = BaseEntities[string]> = SchemaDefinition<TEntity> & {
    title?: string;
    description?: string;
};
export type IntegrationDefinitionProps<TConfig extends BaseConfig = BaseConfig, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> = {
    name: string;
    version: string;
    title?: string;
    description?: string;
    icon?: string;
    readme?: string;
    identifier?: {
        extractScript?: string;
        fallbackHandlerScript?: string;
    };
    configuration?: ConfigurationDefinition<TConfig>;
    events?: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    actions?: {
        [K in keyof TActions]: ActionDefinition<TActions[K]>;
    };
    channels?: {
        [K in keyof TChannels]: ChannelDefinition<TChannels[K]>;
    };
    states?: {
        [K in keyof TStates]: StateDefinition<TStates[K]>;
    };
    user?: UserDefinition;
    secrets?: Record<string, SecretDefinition>;
    entities?: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
};
export declare class IntegrationDefinition<TConfig extends BaseConfig = BaseConfig, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> {
    readonly props: IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly title: this['props']['title'];
    readonly description: this['props']['description'];
    readonly icon: this['props']['icon'];
    readonly readme: this['props']['readme'];
    readonly configuration: this['props']['configuration'];
    readonly events: this['props']['events'];
    readonly actions: this['props']['actions'];
    readonly channels: this['props']['channels'];
    readonly states: this['props']['states'];
    readonly user: this['props']['user'];
    readonly secrets: this['props']['secrets'];
    readonly identifier: this['props']['identifier'];
    readonly entities: this['props']['entities'];
    clone(props: Partial<IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>>): IntegrationDefinition<TConfig, TEvents, TActions, TChannels, TStates, TEntities>;
    constructor(props: IntegrationDefinitionProps<TConfig, TEvents, TActions, TChannels, TStates, TEntities>);
}
export {};
